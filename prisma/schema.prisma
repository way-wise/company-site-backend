generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Permission {
  id              String           @id @default(ulid())
  name            String           @unique
  group           String
  description     String?
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  rolePermissions RolePermission[]

  @@map("permissions")
}

model Role {
  id              String               @id @default(ulid())
  name            String               @unique
  description     String?
  createdAt       DateTime             @default(now())
  updatedAt       DateTime             @updatedAt
  rolePermissions RolePermission[]
  userRoles       UserRoleAssignment[]

  @@map("roles")
}

model RolePermission {
  id           String     @id @default(ulid())
  roleId       String
  permissionId String
  createdAt    DateTime   @default(now())
  permission   Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)
  role         Role       @relation(fields: [roleId], references: [id], onDelete: Cascade)

  @@unique([roleId, permissionId])
  @@map("role_permissions")
}

model UserRoleAssignment {
  id         String   @id @default(ulid())
  userId     String
  roleId     String
  assignedAt DateTime @default(now())
  role       Role     @relation(fields: [roleId], references: [id], onDelete: Cascade)
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, roleId])
  @@map("user_roles")
}

model User {
  id                       String               @id @default(ulid())
  name                     String
  email                    String               @unique
  password                 String
  status                   UserStatus           @default(ACTIVE)
  createdAt                DateTime             @default(now())
  updatedAt                DateTime             @updatedAt
  isPasswordChangeRequired Boolean              @default(true)
  accessToken              String?
  expiresAt                Int?
  refreshToken             String?
  userProfile              UserProfile?
  roles                    UserRoleAssignment[]

  @@index([status])
  @@map("users")
}

model UserProfile {
  id                        String                    @id @default(ulid())
  userId                    String                    @unique
  profilePhoto              String?
  contactNumber             String?
  address                   String?
  gender                    Gender?
  isDeleted                 Boolean                   @default(false)
  bio                       String?
  website                   String?
  twitter                   String?
  linkedIn                  String?
  facebook                  String?
  language                  String?
  education                 String?
  experience                String?
  createdAt                 DateTime                  @default(now())
  updatedAt                 DateTime                  @updatedAt
  blogs                     Blog[]
  comments                  Comment[]
  employeeMilestones        EmployeeMilestone[]
  approvedLeaveApplications LeaveApplication[]        @relation("ApprovedBy")
  leaveApplications         LeaveApplication[]
  projects                  Project[]
  taskAssignments           TaskAssignment[]
  taskComments              TaskComment[]
  tasks                     Task[]
  conversationParticipants  ConversationParticipant[]
  messages                  Message[]
  user                      User                      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_profiles")
}

model Project {
  id            String         @id @default(ulid())
  name          String
  description   String?
  status        ProjectStatus  @default(PENDING)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  userProfileId String
  milestones    Milestone[]
  conversations Conversation[]
  userProfile   UserProfile    @relation(fields: [userProfileId], references: [id], onDelete: Cascade)

  @@index([status])
  @@index([userProfileId])
  @@map("projects")
}

model Milestone {
  id                 String              @id @default(ulid())
  name               String
  description        String?
  status             MilestoneStatus     @default(PENDING)
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  projectId          String
  employeeMilestones EmployeeMilestone[]
  project            Project             @relation(fields: [projectId], references: [id], onDelete: Cascade)
  serviceMilestones  ServiceMilestone[]
  Task               Task[]

  @@index([projectId])
  @@index([status])
  @@map("milestones")
}

model Task {
  id             String     @id @default(ulid())
  title          String
  description    String?
  milestoneId    String
  creatorId      String?
  status         TaskStatus @default(TODO)
  priority       Priority   @default(MEDIUM)
  progress       Int        @default(0)
  estimatedHours Int?

  startedAt   DateTime?
  completedAt DateTime?
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  assignments TaskAssignment[]
  comments    TaskComment[]
  creator     UserProfile?     @relation(fields: [creatorId], references: [id])
  milestone   Milestone        @relation(fields: [milestoneId], references: [id], onDelete: Cascade)

  @@index([status])
  @@index([priority])
  @@index([milestoneId, status])
  @@index([creatorId])
  @@map("tasks")
}

model TaskAssignment {
  id            String      @id @default(ulid())
  taskId        String
  assignedAt    DateTime    @default(now())
  role          String?
  createdAt     DateTime    @default(now())
  userProfileId String
  task          Task        @relation(fields: [taskId], references: [id], onDelete: Cascade)
  userProfile   UserProfile @relation(fields: [userProfileId], references: [id], onDelete: Cascade)

  @@unique([taskId, userProfileId])
  @@map("task_assignments")
}

model TaskComment {
  id            String      @id @default(ulid())
  taskId        String
  content       String
  createdAt     DateTime    @default(now())
  userProfileId String
  task          Task        @relation(fields: [taskId], references: [id], onDelete: Cascade)
  userProfile   UserProfile @relation(fields: [userProfileId], references: [id], onDelete: Cascade)

  @@map("task_comments")
}

model EmployeeMilestone {
  id            String                  @id @default(ulid())
  milestoneId   String
  status        EmployeeMilestoneStatus @default(ASSIGNED)
  createdAt     DateTime                @default(now())
  updatedAt     DateTime                @updatedAt
  userProfileId String
  milestone     Milestone               @relation(fields: [milestoneId], references: [id], onDelete: Cascade)
  userProfile   UserProfile             @relation(fields: [userProfileId], references: [id], onDelete: Cascade)

  @@unique([userProfileId, milestoneId])
  @@map("employee_milestones")
}

model Service {
  id                String             @id @default(ulid())
  name              String
  description       String?
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  serviceMilestones ServiceMilestone[]

  @@map("services")
}

model ServiceMilestone {
  id          String    @id @default(ulid())
  serviceId   String
  milestoneId String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  milestone   Milestone @relation(fields: [milestoneId], references: [id], onDelete: Cascade)
  service     Service   @relation(fields: [serviceId], references: [id], onDelete: Cascade)

  @@unique([serviceId, milestoneId])
  @@index([serviceId])
  @@index([milestoneId])
  @@map("service_milestones")
}

model Blog {
  id            String      @id @default(ulid())
  title         String
  content       String
  coverImage    String?
  visibility    Visibility  @default(PUBLIC)
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  userProfileId String
  userProfile   UserProfile @relation(fields: [userProfileId], references: [id], onDelete: Cascade)
  comments      Comment[]

  @@index([visibility])
  @@map("blogs")
}

model Comment {
  id            String      @id @default(ulid())
  content       String
  blogId        String
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  userProfileId String
  blog          Blog        @relation(fields: [blogId], references: [id], onDelete: Cascade)
  userProfile   UserProfile @relation(fields: [userProfileId], references: [id], onDelete: Cascade)

  @@index([blogId])
  @@index([userProfileId])
  @@map("comments")
}

model LeaveApplication {
  id            String       @id @default(ulid())
  startDate     DateTime
  endDate       DateTime
  reason        String
  status        LeaveStatus  @default(PENDING)
  approvedBy    String?
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  userProfileId String
  approver      UserProfile? @relation("ApprovedBy", fields: [approvedBy], references: [id])
  userProfile   UserProfile  @relation(fields: [userProfileId], references: [id], onDelete: Cascade)

  @@index([userProfileId])
  @@index([status])
  @@index([approvedBy])
  @@map("leave_applications")
}

enum UserStatus {
  ACTIVE
  BLOCKED
  DELETED
}

enum Visibility {
  PUBLIC
  PRIVATE
}

enum Gender {
  MALE
  FEMALE
}

enum ProjectStatus {
  PENDING
  ACTIVE
  COMPLETED
  CANCELLED
}

enum MilestoneStatus {
  PENDING
  ONGOING
  COMPLETED
  REVIEW
  APPROVED
  REJECTED
}

enum EmployeeMilestoneStatus {
  ASSIGNED
  ONGOING
  COMPLETED
  RELEASED
}

enum LeaveStatus {
  PENDING
  APPROVED
  REJECTED
}

enum TaskStatus {
  TODO
  IN_PROGRESS
  BLOCKED
  REVIEW
  DONE
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

model Conversation {
  id           String                    @id @default(ulid())
  name         String?
  type         ConversationType
  projectId    String?
  createdAt    DateTime                  @default(now())
  updatedAt    DateTime                  @updatedAt
  participants ConversationParticipant[]
  messages     Message[]
  project      Project?                  @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@index([type])
  @@index([projectId])
  @@map("conversations")
}

model ConversationParticipant {
  id             String       @id @default(ulid())
  conversationId String
  userProfileId  String
  joinedAt       DateTime     @default(now())
  lastReadAt     DateTime     @default(now())
  isAdmin        Boolean      @default(false)
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  userProfile    UserProfile  @relation(fields: [userProfileId], references: [id], onDelete: Cascade)

  @@unique([conversationId, userProfileId])
  @@index([userProfileId])
  @@index([conversationId])
  @@map("conversation_participants")
}

model Message {
  id             String       @id @default(ulid())
  conversationId String
  senderId       String
  content        String
  attachments    Json?
  isEdited       Boolean      @default(false)
  isDeleted      Boolean      @default(false)
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  sender         UserProfile  @relation(fields: [senderId], references: [id], onDelete: Cascade)

  @@index([conversationId])
  @@index([senderId])
  @@index([createdAt])
  @@map("messages")
}

enum ConversationType {
  DIRECT
  GROUP
  PROJECT
}
