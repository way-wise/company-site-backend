generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserStatus {
  ACTIVE
  BLOCKED
  DELETED
}

enum Visibility {
  PUBLIC
  PRIVATE
}

enum Gender {
  MALE
  FEMALE
}

enum ProjectStatus {
  PENDING
  ACTIVE
  COMPLETED
  CANCELLED
}

enum MilestoneStatus {
  PENDING
  ONGOING
  COMPLETED
  REVIEW
  APPROVED
  REJECTED
}

enum EmployeeMilestoneStatus {
  ASSIGNED
  ONGOING
  COMPLETED
  RELEASED
}

enum LeaveStatus {
  PENDING
  APPROVED
  REJECTED
}

model Permission {
  id          String   @id @default(ulid())
  name        String   @unique
  group       String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  rolePermissions RolePermission[]

  @@map("permissions")
}

model Role {
  id              String               @id @default(ulid())
  name            String               @unique
  description     String?
  createdAt       DateTime             @default(now())
  updatedAt       DateTime             @updatedAt
  rolePermissions RolePermission[]
  userRoles       UserRoleAssignment[]

  @@map("roles")
}

model RolePermission {
  id           String   @id @default(ulid())
  roleId       String
  permissionId String
  createdAt    DateTime @default(now())

  role       Role       @relation(fields: [roleId], references: [id], onDelete: Cascade)
  permission Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)

  @@unique([roleId, permissionId])
  @@map("role_permissions")
}

model UserRoleAssignment {
  id         String   @id @default(ulid())
  userId     String
  roleId     String
  assignedAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  role Role @relation(fields: [roleId], references: [id], onDelete: Cascade)

  @@unique([userId, roleId])
  @@map("user_roles")
}

model User {
  id       String @id @default(ulid())
  name     String
  email    String @unique
  password String

  isPasswordChangeRequired Boolean    @default(true)
  status                   UserStatus @default(ACTIVE)
  createdAt                DateTime   @default(now())
  updatedAt                DateTime   @updatedAt

  admin    Admin?
  client   Client?
  employee Employee?

  roles UserRoleAssignment[]

  @@index([status])
  @@map("users")
}

model Admin {
  id            String   @id @default(ulid())
  userId        String   @unique
  profilePhoto  String?
  contactNumber String?
  isDeleted     Boolean  @default(false)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  user              User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  blogs             Blog[]
  leaveApplications LeaveApplication[]

  @@map("admins")
}

model Client {
  id            String   @id @default(ulid())
  userId        String   @unique
  profilePhoto  String?
  contactNumber String?
  address       String?
  gender        Gender
  isDeleted     Boolean  @default(false)
  bio           String?
  website       String?
  twitter       String?
  linkedIn      String?
  facebook      String?
  language      String?
  education     String?
  experience    String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  user     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  comments Comment[]
  projects Project[]

  @@map("clients")
}

model Employee {
  id            String   @id @default(ulid())
  userId        String   @unique
  profilePhoto  String?
  contactNumber String?
  address       String?
  gender        Gender
  isDeleted     Boolean  @default(false)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  user               User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  employeeMilestones EmployeeMilestone[]
  leaveApplications  LeaveApplication[]

  @@map("employees")
}

model Project {
  id          String        @id @default(ulid())
  name        String
  description String?
  status      ProjectStatus @default(PENDING)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  clientId    String

  client     Client      @relation(fields: [clientId], references: [id], onDelete: Cascade)
  milestones Milestone[]

  @@index([status])
  @@index([clientId])
  @@map("projects")
}

model Milestone {
  id          String          @id @default(ulid())
  name        String
  description String?
  status      MilestoneStatus @default(PENDING)
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  projectId   String

  project            Project             @relation(fields: [projectId], references: [id], onDelete: Cascade)
  employeeMilestones EmployeeMilestone[]
  serviceMilestones  ServiceMilestone[]

  @@index([status])
  @@map("milestones")
}

model EmployeeMilestone {
  id          String                  @id @default(ulid())
  employeeId  String
  milestoneId String
  status      EmployeeMilestoneStatus @default(ASSIGNED)
  createdAt   DateTime                @default(now())
  updatedAt   DateTime                @updatedAt

  employee  Employee  @relation(fields: [employeeId], references: [id], onDelete: Cascade)
  milestone Milestone @relation(fields: [milestoneId], references: [id], onDelete: Cascade)

  @@unique([employeeId, milestoneId])
  @@map("employee_milestones")
}

model Service {
  id                String             @id @default(ulid())
  name              String
  image             String?
  description       String?
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  serviceMilestones ServiceMilestone[]

  @@map("services")
}

model ServiceMilestone {
  id          String    @id @default(ulid())
  serviceId   String
  milestoneId String
  service     Service   @relation(fields: [serviceId], references: [id], onDelete: Cascade)
  milestone   Milestone @relation(fields: [milestoneId], references: [id], onDelete: Cascade)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Blog {
  id         String     @id @default(ulid())
  title      String
  content    String
  coverImage String?
  visibility Visibility @default(PUBLIC)
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  adminId    String

  admin    Admin     @relation(fields: [adminId], references: [id], onDelete: Cascade)
  comments Comment[]

  @@index([visibility])
  @@map("blogs")
}

model Comment {
  id        String   @id @default(ulid())
  content   String
  clientId  String
  blogId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  client Client @relation(fields: [clientId], references: [id], onDelete: Cascade)
  blog   Blog   @relation(fields: [blogId], references: [id], onDelete: Cascade)

  @@map("comments")
}

model LeaveApplication {
  id         String      @id @default(ulid())
  employeeId String
  startDate  DateTime
  endDate    DateTime
  reason     String
  status     LeaveStatus @default(PENDING)
  approvedBy String?
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt

  employee Employee @relation(fields: [employeeId], references: [id], onDelete: Cascade)
  admin    Admin?   @relation(fields: [approvedBy], references: [id], onDelete: SetNull)

  @@index([employeeId])
  @@index([status])
  @@index([approvedBy])
  @@map("leave_applications")
}
